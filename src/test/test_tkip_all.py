#/usr/bin/python
# -*- coding: utf-8 -*-
'''
Testa le operazioni del modulo rc4
OSS: nei test del crc-32 il pack viene fatto in modi diversi (vedi 'testCrc32_2' e 'testCrc32_3' --> struct.unpack) 
'''
import sys
sys.path.append('/media/DATA/06-WorkSpace/netsec_wp/src/crypto')
import wep
import unittest
import struct
import binascii
import array
from tkip import TkipDecryptor


class TestTKIP(unittest.TestCase):
	'''
	Casi di test per le operazioni definite nel modulo TKIP
	'''
	
	def test_TKIP_encryption_1(self):
		'''
		testo la classe wep.WepEncryption tramite i test vector di arc4
		test numero 1 di pag 7 di "draft-kaukonen-cipher-arcfour-01"
		'''
		sa = (0x02,0x03,0x04,0x05,0x06,0x07)
		da = (0x02,0x03,0x04,0x05,0x06,0x08)
		tk = (0x12,0x34,0x56,0x78,0x90,0x12,0x34,0x56,0x78,0x90,0x12,0x34,0x56,0x78,0x90,0x12,0x34,0x56,0x78,0x90,0x12,0x34,0x56,0x78,0x90,0x12,0x34,0x56,0x78,0x90,0x12,0x34)
		pn = (0x000000000001)
		iv = (0x00,0x20,0x01,0x20,0x00,0x00,0x00,0x00)
		phase1 = (0xbb,0x58,0x07,0x1f,0x9e,0x93,0xb4,0x38,0x25,0x4b)
		phase2 = (0x00,0x20,0x01,0x4c,0xfe,0x67,0xbe,0xd2,0x7c,0x86,0x7b,0x1b,0xf8,0x02,0x8b,0x1c)
		plaintext_mpdu = (0x08,0x42,0x2c,0x00,0x02,0x03,0x04,0x05,0x06,0x08,0x02,0x03,0x04,0x05,0x06,0x07,0x02,0x03,0x04,0x05,0x06,0x07,0xd0,0x02,0x00,0x20,0x01,0x20,0x00,0x00,0x00,0x00,0xaa,0xaa,0x03,0x00,0x00,0x00,0x08,0x00,0x45,0x00,0x00,0x54,0x00,0x00,0x40,0x00,0x40,0x01,0xa5,0x55,0xc0,0xa8,0x0a,0x02,0xc0,0xa8,0x0a,0x01,0x08,0x00,0x3a,0xb0,0x00,0x00,0x00,0x00,0xcd,0x4c,0x05,0x00,0x00,0x00,0x00,0x00,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x68,0x81,0xa3,0xf3,0xd6,0x48,0xd0,0x3c)
		ciphertest_mpdu = (0x08,0x42,0x2c,0x00,0x02,0x03,0x04,0x05,0x06,0x08,0x02,0x03,0x04,0x05,0x06,0x07,0x02,0x03,0x04,0x05,0x06,0x07,0xd0,0x02,0x00,0x20,0x01,0x20,0x00,0x00,0x00,0x00,0xc0,0x0e,0x14,0xfc,0xe7,0xcf,0xab,0xc7,0x75,0x47,0xe6,0x66,0xe5,0x7c,0x0d,0xac,0x70,0x4a,0x1e,0x35,0x8a,0x88,0xc1,0x1c,0x8e,0x2e,0x28,0x2e,0x38,0x01,0x02,0x7a,0x46,0x56,0x05,0x5e,0xe9,0x3e,0x9c,0x25,0x47,0x02,0xe9,0x73,0x58,0x05,0xdd,0xb5,0x76,0x9b,0xa7,0x3f,0x1e,0xbb,0x56,0xe8,0x44,0xef,0x91,0x22,0x85,0xd3,0xdd,0x6e,0x54,0x1e,0x82,0x38,0x73,0x55,0x8a,0xdb,0xa0,0x79,0x06,0x8a,0xbd,0x7f,0x7f,0x50,0x95,0x96,0x75,0xac,0xc4,0xb4,0xde,0x9a,0xa9,0x9c,0x05,0xf2,0x89,0xa7,0xc5,0x2f,0xee,0x5b,0xfc,0x14,0xf6,0xf8,0xe5,0xf8)
		
		decryptor = TkipDecryptor(ciphertest_mpdu,tk,0)
		plaintext = decryptor.getDecryptedPacket()

		self.assertEqual(plaintext,plaintext_mpdu)



	
	


	
	


if __name__ == '__main__':
	suite = unittest.TestLoader().loadTestsFromTestCase(TestTKIP)
	unittest.TextTestRunner(verbosity=2).run(suite)

