#/usr/bin/python
# -*- coding: utf-8 -*-
'''
Testa le operazioni della clase crypto_utility
'''
import sys
sys.path.append('../crypto')
import base_crypto_utility
import unittest
import struct



class TestKeyGeneration(unittest.TestCase):
	'''
	Casi di test per le operazioni definite nel modulo base_crypto_utility.py
	'''


	def testLeft_TuttoIlMessaggio(self):
		'''
		test della funzione L prendendo il messaggio intero
		'''
		mex = "ciaociao"
		result = "ciaociao"
		leftPart = base_crypto_utility.left(mex,0,len(mex))
		self.assertEqual(leftPart,result)		



	def testLeft_PrimoByte(self):
		'''
		test della funzione L prendendo il primo byte del messaggio
		'''
		mex = "ciaociao"
		result = "c"
		leftPart = base_crypto_utility.left(mex,0,1)
		self.assertEqual(leftPart,result)		



	def testLeft_ValoriIntermedi(self):
		'''
		test della funzione L con valori intermedi
		'''
		mex = "ciaociao"
		result = "aoci"
		leftPart = base_crypto_utility.left(mex,2,4)
		self.assertEqual(leftPart,result)



	def testLeft_IndiceDiPartenzaNegativo(self):
		'''
		test della funzione L con valori negativi
		'''
		mex = "ciaociao"
		self.assertRaises(ValueError,base_crypto_utility.left,mex,-1,4)



	def testLeft_LunghezzaMessaggioOltreIlLimite(self):
		'''
		test della funzione L con valori negativi
		'''
		mex = "ciaociao"
		self.assertRaises(ValueError,base_crypto_utility.left,mex,0,len(mex)+1)



	def testPrf(self):
		'''
		test della funzione prf con il vettore 1 della rfc (pag 1128)
		'''
		key = struct.pack('20B',0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b)
		prefix = "prefix"
		data = "Hi There"
		length = 512/8
		prf = base_crypto_utility.prf(key,prefix,data,length)
		result = struct.pack('64B',0xbc,0xd4,0xc6,0x50,0xb3,0x0b,0x96,0x84,0x95,0x18,0x29,0xe0,0xd7,0x5f,0x9d,0x54,0xb8,0x62,0x17,0x5e,0xd9,0xf0,0x06,0x06,0xe1,0x7d,0x8d,0xa3,0x54,0x02,0xff,0xee,0x75,0xdf,0x78,0xc3,0xd3,0x1e,0x0f,0x88,0x9f,0x01,0x21,0x20,0xc0,0x86,0x2b,0xeb,0x67,0x75,0x3e,0x74,0x39,0xae,0x24,0x2e,0xdb,0x83,0x73,0x69,0x83,0x56,0xcf,0x5a)
		self.assertEqual(prf,result)



	def testPrf_512(self):
		'''
		testo della funzione prf_512 con il vettore 2 della rfc (pag 1128)
		'''
		key = "Jefe"
		prefix = "prefix"
		data = "what do ya want for nothing?"
		prf = base_crypto_utility.prf_512(key,prefix,data)	
		result = struct.pack('64B',0x51,0xf4,0xde,0x5b,0x33,0xf2,0x49,0xad,0xf8,0x1a,0xeb,0x71,0x3a,0x3c,0x20,0xf4,0xfe,0x63,0x14,0x46,0xfa,0xbd,0xfa,0x58,0x24,0x47,0x59,0xae,0x58,0xef,0x90,0x09,0xa9,0x9a,0xbf,0x4e,0xac,0x2c,0xa5,0xfa,0x87,0xe6,0x92,0xc4,0x40,0xeb,0x40,0x02,0x3e,0x7b,0xab,0xb2,0x06,0xd6,0x1d,0xe7,0xb9,0x2f,0x41,0x52,0x90,0x92,0xb8,0xfc)



	def testPrf_384(self):
		'''
		testo della funzione prf_384 con il vettore 3 della rfc (pag 1128)
		'''
		key = struct.pack('20B',0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa)
		prefix = "prefix"
		data = struct.pack('50B',0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd)	
		result = struct.pack('48B',0xe1,0xac,0x54,0x6e,0xc4,0xcb,0x63,0x6f,0x99,0x76,0x48,0x7b,0xe5,0xc8,0x6b,0xe1,0x7a,0x02,0x52,0xca,0x5d,0x8d,0x8d,0xf1,0x2c,0xfb,0x04,0x73,0x52,0x52,0x49,0xce,0x9d,0xd8,0xd1,0x77,0xea,0xd7,0x10,0xbc,0x9b,0x59,0x05,0x47,0x23,0x91,0x07,0xae)
		


if __name__ == '__main__':
	suite = unittest.TestLoader().loadTestsFromTestCase(TestKeyGeneration)
	unittest.TextTestRunner(verbosity=2).run(suite)
